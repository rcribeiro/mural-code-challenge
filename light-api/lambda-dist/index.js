/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./dist/application.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.LightApiApplication = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ "tslib");\nconst boot_1 = __webpack_require__(/*! @loopback/boot */ "@loopback/boot");\nconst rest_explorer_1 = __webpack_require__(/*! @loopback/rest-explorer */ "@loopback/rest-explorer");\nconst repository_1 = __webpack_require__(/*! @loopback/repository */ "@loopback/repository");\nconst rest_1 = __webpack_require__(/*! @loopback/rest */ "@loopback/rest");\nconst service_proxy_1 = __webpack_require__(/*! @loopback/service-proxy */ "@loopback/service-proxy");\nconst path_1 = tslib_1.__importDefault(__webpack_require__(/*! path */ "path"));\nconst sequence_1 = __webpack_require__(/*! ./sequence */ "./dist/sequence.js");\nclass LightApiApplication extends (0, boot_1.BootMixin)((0, service_proxy_1.ServiceMixin)((0, repository_1.RepositoryMixin)(rest_1.RestApplication))) {\n    constructor(options = {}) {\n        super(options);\n        // Set up the custom sequence\n        this.sequence(sequence_1.MySequence);\n        // Set up default home page\n        this.static(\'/\', path_1.default.join(__dirname, \'../public\'));\n        // Customize @loopback/rest-explorer configuration here\n        this.configure(rest_explorer_1.RestExplorerBindings.COMPONENT).to({\n            path: \'/explorer\',\n        });\n        this.component(rest_explorer_1.RestExplorerComponent);\n        this.projectRoot = __dirname;\n        // Customize @loopback/boot Booter Conventions here\n        this.bootOptions = {\n            controllers: {\n                // Customize ControllerBooter Conventions here\n                dirs: [\'controllers\'],\n                extensions: [\'.controller.js\'],\n                nested: true,\n            },\n        };\n    }\n}\nexports.LightApiApplication = LightApiApplication;\n//# sourceMappingURL=application.js.map\n\n//# sourceURL=webpack://light-api/./dist/application.js?')},"./dist/config.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getConfig = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"tslib\");\nconst aws_sdk_1 = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\nconst debug_1 = tslib_1.__importDefault(__webpack_require__(/*! debug */ \"debug\"));\nconst debug = (0, debug_1.default)('api-core:config');\nlet cachedConfig = null;\nasync function getConfig() {\n    var _a;\n    // Return cached config if available\n    if (cachedConfig) {\n        return cachedConfig;\n    }\n    // Use environment variables as defaults\n    const defaultConfig = {\n        debug_level: process.env.DEBUG || 'error',\n        cors_allowed_origins: process.env.CORS_ALLOWED_ORIGINS || 'http://localhost:3000',\n        mongodb_connection_options: {\n            minPoolSize: 0,\n            maxPoolSize: 10,\n            maxIdleTimeMS: 270000,\n            serverSelectionTimeoutMS: 5000,\n        },\n    };\n    // If not running in AWS or no config path specified, use defaults\n    if (!process.env.CONFIG_PATH || \"development\" === 'development') {\n        debug('Using default configuration');\n        cachedConfig = defaultConfig;\n        return defaultConfig;\n    }\n    try {\n        debug(`Loading configuration from Parameter Store: ${process.env.CONFIG_PATH}`);\n        const ssm = new aws_sdk_1.SSM({ region: process.env.REGION || 'us-east-1' });\n        const response = await ssm.getParameter({\n            Name: process.env.CONFIG_PATH,\n            WithDecryption: true,\n        }).promise();\n        if ((_a = response.Parameter) === null || _a === void 0 ? void 0 : _a.Value) {\n            const loadedConfig = JSON.parse(response.Parameter.Value);\n            // Merge with defaults\n            cachedConfig = {\n                ...defaultConfig,\n                ...loadedConfig,\n                mongodb_connection_options: {\n                    ...defaultConfig.mongodb_connection_options,\n                    ...(loadedConfig.mongodb_connection_options || {}),\n                },\n            };\n            debug('Configuration loaded successfully');\n            return cachedConfig;\n        }\n        debug('No configuration found in Parameter Store, using defaults');\n        cachedConfig = defaultConfig;\n        return defaultConfig;\n    }\n    catch (error) {\n        debug('Error loading configuration from Parameter Store:', error);\n        debug('Falling back to default configuration');\n        cachedConfig = defaultConfig;\n        return defaultConfig;\n    }\n}\nexports.getConfig = getConfig;\n//# sourceMappingURL=config.js.map\n\n//# sourceURL=webpack://light-api/./dist/config.js?")},"./dist/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.handler = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"tslib\");\nconst express_1 = tslib_1.__importDefault(__webpack_require__(/*! express */ \"express\"));\nconst cors_1 = tslib_1.__importDefault(__webpack_require__(/*! cors */ \"cors\"));\nconst body_parser_1 = tslib_1.__importDefault(__webpack_require__(/*! body-parser */ \"body-parser\"));\nconst application_1 = __webpack_require__(/*! ./application */ \"./dist/application.js\");\nconst serverless_express_1 = tslib_1.__importDefault(__webpack_require__(/*! @vendia/serverless-express */ \"@vendia/serverless-express\"));\nconst config_1 = __webpack_require__(/*! ./config */ \"./dist/config.js\");\n// Initialize Express app outside the handler\nconst expressApp = (0, express_1.default)();\n// Lazy-loaded application promise\nlet lbAppPromise = null;\nlet serverlessExpressInstance = null;\nlet configPromise = null;\n// Function to get or initialize the configuration\nconst getAppConfig = async () => {\n    if (!configPromise) {\n        configPromise = (0, config_1.getConfig)();\n    }\n    return configPromise;\n};\n// Function to get or initialize the LoopBack application\nconst getLbApp = async () => {\n    if (!lbAppPromise) {\n        lbAppPromise = (async () => {\n            var _a, _b, _c, _d;\n            console.log('Initializing LoopBack application...');\n            // Get configuration\n            const config = await getAppConfig();\n            // Set debug level from config\n            if (config.debug_level) {\n                process.env.DEBUG = config.debug_level;\n            }\n            // Configure CORS\n            const corsOptions = {\n                origin: ((_a = config.cors_allowed_origins) === null || _a === void 0 ? void 0 : _a.split(',')) || ['http://localhost:3000'],\n                methods: ((_b = process.env.CORS_ALLOWED_METHODS) === null || _b === void 0 ? void 0 : _b.split(',')) || ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD', 'PATCH'],\n                allowedHeaders: ((_c = process.env.CORS_ALLOWED_HEADERS) === null || _c === void 0 ? void 0 : _c.split(',')) || ['Content-Type', 'Authorization', 'X-Amz-Date', 'X-Api-Key', 'X-Amz-Security-Token', 'on-behalf-of'],\n                exposedHeaders: ((_d = process.env.CORS_EXPOSED_HEADERS) === null || _d === void 0 ? void 0 : _d.split(',')) || ['Content-Type', 'Authorization', 'Retry-After', 'X-Rate-Limit-Exceeded', 'on-behalf-of'],\n                credentials: process.env.CORS_ALLOW_CREDENTIALS === 'true',\n                maxAge: parseInt(process.env.CORS_MAX_AGE || '300'),\n            };\n            // Apply middleware to Express app\n            expressApp.use((0, cors_1.default)(corsOptions));\n            expressApp.use(body_parser_1.default.json());\n            expressApp.use(body_parser_1.default.urlencoded({ extended: true }));\n            const app = new application_1.LightApiApplication({\n                rest: {\n                    port: 0,\n                    host: '127.0.0.1',\n                    openApiSpec: {\n                        setServersFromRequest: true,\n                    },\n                    expressSettings: {\n                        'x-powered-by': false,\n                        'trust proxy': true,\n                    },\n                    cors: false,\n                    requestBodyParser: {\n                        json: false,\n                        text: false,\n                        urlencoded: false,\n                    },\n                },\n            });\n            await app.boot();\n            await app.start();\n            console.log('LoopBack application initialized successfully');\n            return app;\n        })();\n    }\n    return lbAppPromise;\n};\n// Initialize the serverless express instance\nconst getServerlessExpressInstance = async () => {\n    if (!serverlessExpressInstance) {\n        const lbApp = await getLbApp();\n        // Mount the LoopBack app on the Express app\n        expressApp.use((req, res) => {\n            lbApp.requestHandler(req, res);\n        });\n        serverlessExpressInstance = (0, serverless_express_1.default)({\n            app: expressApp,\n            binarySettings: {\n                isBinary: () => false,\n            }\n        });\n    }\n    return serverlessExpressInstance;\n};\n// Warm up the application during container initialization\nif (process.env.AWS_LAMBDA_INITIALIZATION_TYPE === 'provisioned-concurrency') {\n    console.log('Provisioned concurrency initialization - warming up application');\n    getServerlessExpressInstance().catch(err => {\n        console.error('Error during warm-up:', err);\n    });\n}\nconst handler = async (event, context) => {\n    // Set remaining time logging\n    const timeRemaining = () => Math.ceil((context.getRemainingTimeInMillis() / 1000));\n    try {\n        console.log(`Handler invoked with ${timeRemaining()}s remaining`);\n        console.log('Incoming event:', JSON.stringify(event));\n        const instance = await getServerlessExpressInstance();\n        return instance(event, context);\n    }\n    catch (error) {\n        console.error(`Error with ${timeRemaining()}s remaining:`, error);\n        return {\n            statusCode: 500,\n            body: JSON.stringify({ error: 'Internal Server Error' }),\n            headers: { 'Content-Type': 'application/json' }\n        };\n    }\n};\nexports.handler = handler;\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://light-api/./dist/index.js?")},"./dist/sequence.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MySequence = void 0;\nconst rest_1 = __webpack_require__(/*! @loopback/rest */ "@loopback/rest");\nclass MySequence extends rest_1.MiddlewareSequence {\n}\nexports.MySequence = MySequence;\n//# sourceMappingURL=sequence.js.map\n\n//# sourceURL=webpack://light-api/./dist/sequence.js?')},"@loopback/boot":e=>{e.exports=require("@loopback/boot")},"@loopback/repository":e=>{e.exports=require("@loopback/repository")},"@loopback/rest":e=>{e.exports=require("@loopback/rest")},"@loopback/rest-explorer":e=>{e.exports=require("@loopback/rest-explorer")},"@loopback/service-proxy":e=>{e.exports=require("@loopback/service-proxy")},"@vendia/serverless-express":e=>{e.exports=require("@vendia/serverless-express")},"aws-sdk":e=>{e.exports=require("aws-sdk")},"body-parser":e=>{e.exports=require("body-parser")},cors:e=>{e.exports=require("cors")},debug:e=>{e.exports=require("debug")},express:e=>{e.exports=require("express")},path:e=>{e.exports=require("path")},tslib:e=>{e.exports=require("tslib")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](o,o.exports,__webpack_require__),o.exports}var __webpack_exports__=__webpack_require__("./dist/index.js");module.exports=__webpack_exports__})();